{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createForOfIteratorHelper from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/apple/Desktop/Projects/Vendor-App/VendorsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nvar isDateObject = function isDateObject(data) {\n  return data instanceof Date;\n};\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n};\n\nvar getControllerValue = function getControllerValue(event) {\n  return isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n};\n\nvar getNodeParentName = function getNodeParentName(name) {\n  return name.substring(0, name.search(/.\\d/)) || name;\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return getNodeParentName(name) === current;\n  });\n};\n\nvar compact = function compact(value) {\n  return value.filter(Boolean);\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar get = function get(obj, path, defaultValue) {\n  if (isObject(obj) && path) {\n    var result = compact(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n      return isNullOrUndefined(result) ? result : result[key];\n    }, obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n\n  return undefined;\n};\n\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = function omit(source, key) {\n  var copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nvar HookFormContext = React.createContext(null);\n\nvar useFormContext = function useFormContext() {\n  return React.useContext(HookFormContext);\n};\n\nvar FormProvider = function FormProvider(props) {\n  return React.createElement(HookFormContext.Provider, {\n    value: omit(props, 'children')\n  }, props.children);\n};\n\nvar getProxyFormState = function getProxyFormState(formState, _proxyFormState, localProxyFormState) {\n  var isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  function createGetter(prop) {\n    return function () {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n\n      return undefined;\n    };\n  }\n\n  var result = {};\n\n  for (var key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nvar shouldRenderFormState = function shouldRenderFormState(formStateData, _proxyFormState, isRoot) {\n  var formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(function (key) {\n    return _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all);\n  });\n};\n\nvar convertToArrayPayload = function convertToArrayPayload(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\nvar shouldSubscribeByName = function shouldSubscribeByName(name, signalName) {\n  return !name || !signalName || convertToArrayPayload(name).some(function (currentName) {\n    return currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName));\n  });\n};\n\nvar tearDown = function tearDown(_unsubscribe) {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n\n    _unsubscribe.current = undefined;\n  }\n};\n\nvar updateSubscriptionProps = function updateSubscriptionProps(_ref) {\n  var _unsubscribe = _ref._unsubscribe,\n      props = _ref.props;\n  return function () {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback\n      });\n    }\n  };\n};\n\nfunction useSubscribe(props) {\n  var _unsubscribe = React.useRef();\n\n  var _updateSubscription = React.useRef(function () {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe: _unsubscribe,\n    props: props\n  });\n  !props.skipEarlySubscription && _updateSubscription.current();\n  React.useEffect(function () {\n    _updateSubscription.current();\n\n    return function () {\n      return tearDown(_unsubscribe);\n    };\n  }, []);\n}\n\nfunction useFormState(props) {\n  var methods = useFormContext();\n\n  var _ref2 = props || {},\n      _ref2$control = _ref2.control,\n      control = _ref2$control === void 0 ? methods.control : _ref2$control,\n      disabled = _ref2.disabled,\n      name = _ref2.name;\n\n  var _React$useState = React.useState(control._formState),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      formState = _React$useState2[0],\n      updateFormState = _React$useState2[1];\n\n  var _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  var _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    callback: function callback(formState) {\n      return shouldSubscribeByName(_name.current, formState.name) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState));\n    },\n    subject: control._subjects.state,\n    skipEarlySubscription: true\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nfunction useController(props) {\n  var methods = useFormContext();\n  var name = props.name,\n      _props$control = props.control,\n      control = _props$control === void 0 ? methods.control : _props$control,\n      shouldUnregister = props.shouldUnregister;\n\n  var _React$useState3 = React.useState(get(control._formValues, name, get(control._defaultValues, name, props.defaultValue))),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      value = _React$useState4[0],\n      setInputStateValue = _React$useState4[1];\n\n  var formState = useFormState({\n    control: control || methods.control,\n    name: name\n  });\n\n  var _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: function callback(data) {\n      return (!data.name || _name.current === data.name) && setInputStateValue(get(data.values, _name.current));\n    }\n  });\n  var registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value: value\n  }));\n  var updateMounted = React.useCallback(function (name, value) {\n    var field = get(control._fields, name);\n\n    if (field) {\n      field._f.mount = value;\n    }\n  }, [control]);\n  React.useEffect(function () {\n    updateMounted(name, true);\n    return function () {\n      var _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n  return {\n    field: {\n      onChange: function onChange(event) {\n        var value = getControllerValue(event);\n        setInputStateValue(value);\n        registerProps.onChange({\n          target: {\n            value: value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: function onBlur() {\n        registerProps.onBlur({\n          target: {\n            value: value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name: name,\n      value: value,\n      ref: function ref(elm) {\n        var field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: function focus() {\n              return elm.focus();\n            },\n            setCustomValidity: function setCustomValidity(message) {\n              return elm.setCustomValidity(message);\n            },\n            reportValidity: function reportValidity() {\n              return elm.reportValidity();\n            }\n          };\n        }\n      }\n    },\n    formState: formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nvar Controller = function Controller(props) {\n  return props.render(useController(props));\n};\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  return validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n    types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), _defineProperty({}, type, message || true))\n  }) : {};\n};\n\nvar isKey = function isKey(value) {\n  return /^\\w*$/.test(value);\n};\n\nvar stringToPath = function stringToPath(input) {\n  return compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar focusFieldBy = function focusFieldBy(fields, callback, fieldsNames) {\n  var _iterator = _createForOfIteratorHelper(fieldsNames || Object.keys(fields)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var field = get(fields, key);\n\n      if (field) {\n        var _f = field._f;\n        var current = omit(field, '_f');\n\n        if (_f && callback(_f.name)) {\n          if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n            break;\n          } else if (_f.refs) {\n            _f.refs[0].focus();\n\n            break;\n          }\n        } else if (isObject(current)) {\n          focusFieldBy(current, callback);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar getFocusFieldName = function getFocusFieldName(name, index) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || \"\".concat(name, \".\").concat(isUndefined(options.focusIndex) ? index : options.focusIndex, \".\") : '';\n};\n\nvar mapCurrentIds = function mapCurrentIds(values, _fieldIds, keyName) {\n  return values.map(function (value, index) {\n    var output = _fieldIds.current[index];\n    return Object.assign(Object.assign({}, value), output ? _defineProperty({}, keyName, output[keyName]) : {});\n  });\n};\n\nvar generateId = function generateId() {\n  var d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = function mapIds() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(function (value) {\n    return Object.assign(Object.assign({}, value[keyName] ? {} : _defineProperty({}, keyName, generateId())), value);\n  });\n};\n\nfunction append(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(data)), _toConsumableArray(convertToArrayPayload(value)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return Array.isArray(value) ? value.map(function () {\n    return undefined;\n  }) : undefined;\n};\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(data.slice(index)));\n}\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar omitKeys = function omitKeys(fields, keyName) {\n  return fields.map(function () {\n    var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return omit(field, keyName);\n  });\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(convertToArrayPayload(data)));\n}\n\nfunction removeAtIndexes(data, indexes) {\n  var i = 0;\n\n  var temp = _toConsumableArray(data);\n\n  var _iterator2 = _createForOfIteratorHelper(indexes),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var index = _step2.value;\n      temp.splice(index - i, 1);\n      i++;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort(function (a, b) {\n    return a - b;\n  }));\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar updateAt = function updateAt(fieldValues, index, value) {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n\nvar useFieldArray = function useFieldArray(props) {\n  var methods = useFormContext();\n  var _props$control2 = props.control,\n      control = _props$control2 === void 0 ? methods.control : _props$control2,\n      name = props.name,\n      _props$keyName = props.keyName,\n      keyName = _props$keyName === void 0 ? 'id' : _props$keyName,\n      shouldUnregister = props.shouldUnregister;\n\n  var _React$useState5 = React.useState(mapIds(control._getFieldArray(name), keyName)),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      fields = _React$useState6[0],\n      setFields = _React$useState6[1];\n\n  var _fieldIds = React.useRef(fields);\n\n  var _name = React.useRef(name);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: function callback(_ref5) {\n      var values = _ref5.values,\n          fieldArrayName = _ref5.name;\n\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true\n  });\n  var updateValues = React.useCallback(function (updatedFieldArrayValuesWithKey) {\n    var updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    set(control._formValues, name, updatedFieldArrayValues);\n    setFields(updatedFieldArrayValuesWithKey);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n\n  var append$1 = function append$1(value, options) {\n    var appendValue = convertToArrayPayload(value);\n    var updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n\n  var prepend$1 = function prepend$1(value, options) {\n    var updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  var remove = function remove(index) {\n    var updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n  };\n\n  var insert$1 = function insert$1(index, value, options) {\n    var updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  var swap = function swap(indexA, indexB) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  var move = function move(from, to) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  var update = function update(index, value) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    var updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n  };\n\n  var replace = function replace(value) {\n    var updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n\n    control._updateFieldArray(name, function () {\n      return updatedFieldArrayValuesWithKey;\n    }, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n  };\n\n  React.useEffect(function () {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      var _iterator3 = _createForOfIteratorHelper(control._names.watch),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var watchField = _step3.value;\n\n          if (name.startsWith(watchField)) {\n            control._subjects.state.next({});\n\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    control._subjects.watch.next({\n      name: name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, function (key) {\n      return key.startsWith(control._names.focus);\n    });\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(function () {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return function () {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nfunction cloneObject(data) {\n  var copy;\n  var isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n\n    for (var key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  var keys1 = Object.keys(object1);\n  var keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (var _i = 0, _keys = keys1; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    var val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      var val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar getValidationModes = function getValidationModes(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched\n  };\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"select-multiple\";\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nvar live = function live(ref) {\n  return isHTMLElement(ref) && document.contains(ref);\n};\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription() {\n    _classCallCheck(this, Subscription);\n\n    this.tearDowns = [];\n  }\n\n  _createClass(Subscription, [{\n    key: \"add\",\n    value: function add(tearDown) {\n      this.tearDowns.push(tearDown);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _iterator4 = _createForOfIteratorHelper(this.tearDowns),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var teardown = _step4.value;\n          teardown();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this.tearDowns = [];\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar Subscriber = /*#__PURE__*/function () {\n  function Subscriber(observer, subscription) {\n    var _this = this;\n\n    _classCallCheck(this, Subscriber);\n\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(function () {\n      return _this.closed = true;\n    });\n  }\n\n  _createClass(Subscriber, [{\n    key: \"next\",\n    value: function next(value) {\n      if (!this.closed) {\n        this.observer.next(value);\n      }\n    }\n  }]);\n\n  return Subscriber;\n}();\n\nvar Subject = /*#__PURE__*/function () {\n  function Subject() {\n    _classCallCheck(this, Subject);\n\n    this.observers = [];\n  }\n\n  _createClass(Subject, [{\n    key: \"next\",\n    value: function next(value) {\n      var _iterator5 = _createForOfIteratorHelper(this.observers),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var observer = _step5.value;\n          observer.next(value);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      var subscription = new Subscription();\n      var subscriber = new Subscriber(observer, subscription);\n      this.observers.push(subscriber);\n      return subscription;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.observers = [];\n    }\n  }]);\n\n  return Subject;\n}();\n\nfunction baseGet(object, updatePath) {\n  var length = updatePath.slice(0, -1).length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = void 0;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data) || isBoolean(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.checked && !option.disabled;\n      }).map(function (option) {\n        return option.value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = function getFieldValueAs(value, _ref6) {\n  var valueAsNumber = _ref6.valueAsNumber,\n      valueAsDate = _ref6.valueAsDate,\n      setValueAs = _ref6.setValueAs;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nvar defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return Array.isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.checked && !option.disabled ? {\n      isValid: true,\n      value: option.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nfunction getFieldValue(_f) {\n  var ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(function (ref) {\n    return ref.disabled;\n  }) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return _toConsumableArray(ref.selectedOptions).map(function (_ref7) {\n      var value = _ref7.value;\n      return value;\n    });\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = function getResolverOptions(fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) {\n  var fields = {};\n\n  var _iterator6 = _createForOfIteratorHelper(fieldsNames),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var name = _step6.value;\n      var field = get(_fields, name);\n      field && set(fields, name, field._f);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return {\n    criteriaMode: criteriaMode,\n    names: _toConsumableArray(fieldsNames),\n    fields: fields,\n    shouldUseNativeValidation: shouldUseNativeValidation\n  };\n};\n\nvar hasValidation = function hasValidation(options) {\n  return options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n};\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (var key in source) {\n    var targetValue = target[key];\n    var sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  var index = -1;\n\n  while (++index < values.length) {\n    for (var key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), _defineProperty({}, key, true));\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = function setFieldArrayDirtyFields(values, defaultValues, dirtyFields) {\n  return deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n};\n\nvar skipValidation = function skipValidation(isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = function unsetEmptyArray(ref, name) {\n  return !compact(get(ref, name, [])).length && unset(ref, name);\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || React.isValidElement(value);\n};\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isObject(validationData) && !isRegex(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) {\n    var _field$_f, ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, inputRef, setCustomValidty, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref9, value, message, exceedMax, exceedMin, maxOutput, minOutput, valueNumber, valueDate, maxLengthOutput, minLengthOutput, _exceedMax, _exceedMin, _getValueAndMessage, patternValue, _message, result, validateError, validationResult, key, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _field$_f = field._f, ref = _field$_f.ref, refs = _field$_f.refs, required = _field$_f.required, maxLength = _field$_f.maxLength, minLength = _field$_f.minLength, min = _field$_f.min, max = _field$_f.max, pattern = _field$_f.pattern, validate = _field$_f.validate, name = _field$_f.name, valueAsNumber = _field$_f.valueAsNumber, mount = _field$_f.mount, disabled = _field$_f.disabled;\n\n            if (!(!mount || disabled)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 3:\n            inputRef = refs ? refs[0] : ref;\n\n            setCustomValidty = function setCustomValidty(message) {\n              if (shouldUseNativeValidation && inputRef.reportValidity) {\n                inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n                inputRef.reportValidity();\n              }\n            };\n\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n            };\n\n            if (!(required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid))) {\n              _context.next = 19;\n              break;\n            }\n\n            _ref9 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), value = _ref9.value, message = _ref9.message;\n\n            if (!value) {\n              _context.next = 19;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: message,\n              ref: inputRef\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 19;\n              break;\n            }\n\n            setCustomValidty(message);\n            return _context.abrupt(\"return\", error);\n\n          case 19:\n            if (!(!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max)))) {\n              _context.next = 28;\n              break;\n            }\n\n            maxOutput = getValueAndMessage(max);\n            minOutput = getValueAndMessage(min);\n\n            if (!isNaN(inputValue)) {\n              valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n              if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n              }\n\n              if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(inputValue);\n\n              if (isString(maxOutput.value)) {\n                exceedMax = valueDate > new Date(maxOutput.value);\n              }\n\n              if (isString(minOutput.value)) {\n                exceedMin = valueDate < new Date(minOutput.value);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 28;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 28;\n              break;\n            }\n\n            setCustomValidty(error[name].message);\n            return _context.abrupt(\"return\", error);\n\n          case 28:\n            if (!((maxLength || minLength) && !isEmpty && isString(inputValue))) {\n              _context.next = 38;\n              break;\n            }\n\n            maxLengthOutput = getValueAndMessage(maxLength);\n            minLengthOutput = getValueAndMessage(minLength);\n            _exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n            _exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 38;\n              break;\n            }\n\n            getMinMaxMessage(_exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 38;\n              break;\n            }\n\n            setCustomValidty(error[name].message);\n            return _context.abrupt(\"return\", error);\n\n          case 38:\n            if (!(pattern && !isEmpty && isString(inputValue))) {\n              _context.next = 45;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(pattern), patternValue = _getValueAndMessage.value, _message = _getValueAndMessage.message;\n\n            if (!(isRegex(patternValue) && !inputValue.match(patternValue))) {\n              _context.next = 45;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: _message,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, _message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 45;\n              break;\n            }\n\n            setCustomValidty(_message);\n            return _context.abrupt(\"return\", error);\n\n          case 45:\n            if (!validate) {\n              _context.next = 79;\n              break;\n            }\n\n            if (!isFunction(validate)) {\n              _context.next = 58;\n              break;\n            }\n\n            _context.next = 49;\n            return validate(inputValue);\n\n          case 49:\n            result = _context.sent;\n            validateError = getValidateError(result, inputRef);\n\n            if (!validateError) {\n              _context.next = 56;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 56;\n              break;\n            }\n\n            setCustomValidty(validateError.message);\n            return _context.abrupt(\"return\", error);\n\n          case 56:\n            _context.next = 79;\n            break;\n\n          case 58:\n            if (!isObject(validate)) {\n              _context.next = 79;\n              break;\n            }\n\n            validationResult = {};\n            _context.t0 = _regeneratorRuntime.keys(validate);\n\n          case 61:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 75;\n              break;\n            }\n\n            key = _context.t1.value;\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 65;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 75);\n\n          case 65:\n            _context.t2 = getValidateError;\n            _context.next = 68;\n            return validate[key](inputValue);\n\n          case 68:\n            _context.t3 = _context.sent;\n            _context.t4 = inputRef;\n            _context.t5 = key;\n            _validateError = (0, _context.t2)(_context.t3, _context.t4, _context.t5);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n              setCustomValidty(_validateError.message);\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n            _context.next = 61;\n            break;\n\n          case 75:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 79;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: inputRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 79;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 79:\n            setCustomValidty(true);\n            return _context.abrupt(\"return\", error);\n\n          case 81:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nvar isWindowUndefined = typeof window === 'undefined';\n\nfunction createFormControl() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _options = Object.assign(Object.assign({}, defaultOptions), props);\n\n  var _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  var _fields = {};\n\n  var _defaultValues = _options.defaultValues || {};\n\n  var _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  var _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  var _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  var delayErrorCallback;\n  var timer = 0;\n  var validateFields = {};\n  var _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  var _subjects = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  };\n  var validationModeBeforeSubmit = getValidationModes(_options.mode);\n  var validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  var shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  var debounce = function debounce(callback, wait) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      clearTimeout(timer);\n      timer = window.setTimeout(function () {\n        return callback.apply(void 0, args);\n      }, wait);\n    };\n  };\n\n  var isFieldWatched = function isFieldWatched(name, isBlurEvent) {\n    return !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n  };\n\n  var _updateValid = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(shouldSkipRender) {\n      var isValid;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              isValid = false;\n\n              if (!_proxyFormState.isValid) {\n                _context2.next = 15;\n                break;\n              }\n\n              if (!_options.resolver) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.t1 = isEmptyObject;\n              _context2.next = 6;\n              return executeResolver();\n\n            case 6:\n              _context2.t2 = _context2.sent.errors;\n              _context2.t0 = (0, _context2.t1)(_context2.t2);\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.next = 12;\n              return executeBuildInValidation(_fields, true);\n\n            case 12:\n              _context2.t0 = _context2.sent;\n\n            case 13:\n              isValid = _context2.t0;\n\n              if (!shouldSkipRender && isValid !== _formState.isValid) {\n                _formState.isValid = isValid;\n\n                _subjects.state.next({\n                  isValid: isValid\n                });\n              }\n\n            case 15:\n              return _context2.abrupt(\"return\", isValid);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function _updateValid(_x5) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var _updateFieldArray = function _updateFieldArray(name, method, args) {\n    var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      var fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      var errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      var touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n\n  var updateErrors = function updateErrors(name, error) {\n    return set(_formState.errors, name, error), _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n\n  var updateValidAndValue = function updateValidAndValue(name, shouldSkipSetValueAs, ref) {\n    var field = get(_fields, name);\n\n    if (field) {\n      var defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  var updateTouchAndDirty = function updateTouchAndDirty(name, fieldValue, isCurrentTouched) {\n    var shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var isFieldDirty = false;\n    var output = {\n      name: name\n    };\n    var isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      var isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      var isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      var isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  var updateFieldArrayDirty = function updateFieldArrayDirty(name, value) {\n    return set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name);\n  };\n\n  var shouldRenderByError = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(shouldSkipRender, name, isValid, error, fieldState) {\n      var previousFieldError, shouldUpdateValid, updatedFormState;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              previousFieldError = get(_formState.errors, name);\n              shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n              if (props.delayError && error) {\n                delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n                delayErrorCallback(name, error);\n              } else {\n                clearTimeout(timer);\n                error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n              }\n\n              if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n                updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n                  isValid: isValid\n                } : {}), {\n                  errors: _formState.errors,\n                  name: name\n                });\n                _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n\n                _subjects.state.next(updatedFormState);\n              }\n\n              validateFields[name]--;\n\n              if (_proxyFormState.isValidating && !validateFields[name]) {\n                _subjects.state.next({\n                  isValidating: false\n                });\n\n                validateFields = {};\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function shouldRenderByError(_x6, _x7, _x8, _x9, _x10) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var executeResolver = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!_options.resolver) {\n                _context4.next = 6;\n                break;\n              }\n\n              _context4.next = 3;\n              return _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n\n            case 3:\n              _context4.t0 = _context4.sent;\n              _context4.next = 7;\n              break;\n\n            case 6:\n              _context4.t0 = {};\n\n            case 7:\n              return _context4.abrupt(\"return\", _context4.t0);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function executeResolver(_x11) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var executeResolverValidation = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(names) {\n      var _yield$executeResolve, errors, _iterator7, _step7, _name2, _error;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return executeResolver();\n\n            case 2:\n              _yield$executeResolve = _context5.sent;\n              errors = _yield$executeResolve.errors;\n\n              if (names) {\n                _iterator7 = _createForOfIteratorHelper(names);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    _name2 = _step7.value;\n                    _error = get(errors, _name2);\n                    _error ? set(_formState.errors, _name2, _error) : unset(_formState.errors, _name2);\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n              } else {\n                _formState.errors = errors;\n              }\n\n              return _context5.abrupt(\"return\", errors);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function executeResolverValidation(_x12) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var executeBuildInValidation = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fields, shouldOnlyCheckValid) {\n      var context,\n          _name3,\n          field,\n          fieldReference,\n          fieldValue,\n          fieldError,\n          _args6 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              context = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {\n                valid: true\n              };\n              _context6.t0 = _regeneratorRuntime.keys(fields);\n\n            case 2:\n              if ((_context6.t1 = _context6.t0()).done) {\n                _context6.next = 23;\n                break;\n              }\n\n              _name3 = _context6.t1.value;\n              field = fields[_name3];\n\n              if (!field) {\n                _context6.next = 21;\n                break;\n              }\n\n              fieldReference = field._f;\n              fieldValue = omit(field, '_f');\n\n              if (!fieldReference) {\n                _context6.next = 17;\n                break;\n              }\n\n              _context6.next = 11;\n              return validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n            case 11:\n              fieldError = _context6.sent;\n\n              if (!fieldError[fieldReference.name]) {\n                _context6.next = 16;\n                break;\n              }\n\n              context.valid = false;\n\n              if (!shouldOnlyCheckValid) {\n                _context6.next = 16;\n                break;\n              }\n\n              return _context6.abrupt(\"break\", 23);\n\n            case 16:\n              if (!shouldOnlyCheckValid) {\n                fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n              }\n\n            case 17:\n              _context6.t2 = fieldValue;\n\n              if (!_context6.t2) {\n                _context6.next = 21;\n                break;\n              }\n\n              _context6.next = 21;\n              return executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context);\n\n            case 21:\n              _context6.next = 2;\n              break;\n\n            case 23:\n              return _context6.abrupt(\"return\", context.valid);\n\n            case 24:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function executeBuildInValidation(_x13, _x14) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var _removeUnmounted = function _removeUnmounted() {\n    var _iterator8 = _createForOfIteratorHelper(_names.unMount),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var _name4 = _step8.value;\n        var field = get(_fields, _name4);\n        field && (field._f.refs ? field._f.refs.every(function (ref) {\n          return !live(ref);\n        }) : !live(field._f.ref)) && unregister(_name4);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    _names.unMount = new Set();\n  };\n\n  var _getDirty = function _getDirty(name, data) {\n    return name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues);\n  };\n\n  var _getWatch = function _getWatch(names, defaultValue, isGlobal) {\n    var fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? _defineProperty({}, names, defaultValue) : defaultValue);\n\n    if (names) {\n      var result = convertToArrayPayload(names).map(function (fieldName) {\n        return isGlobal && _names.watch.add(fieldName), get(fieldValues, fieldName);\n      });\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  var _getFieldArray = function _getFieldArray(name) {\n    return get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n  };\n\n  var setFieldValue = function setFieldValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    var field = get(_fields, name);\n    var fieldValue = value;\n\n    if (field) {\n      var fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          _toConsumableArray(fieldReference.ref.options).forEach(function (selectRef) {\n            return selectRef.selected = fieldValue.includes(selectRef.value);\n          });\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(function (checkboxRef) {\n              return checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(function (data) {\n                return data === checkboxRef.value;\n              }) : fieldValue === checkboxRef.value;\n            }) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(function (radioRef) {\n              return radioRef.checked = radioRef.value === fieldValue;\n            });\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender && _subjects.control.next({\n          values: _formValues,\n          name: name\n        });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n\n  var setValues = function setValues(name, value, options) {\n    for (var fieldKey in value) {\n      var fieldValue = value[fieldKey];\n      var fieldName = \"\".concat(name, \".\").concat(fieldKey);\n      var field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  var setValue = function setValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var field = get(_fields, name);\n\n    var isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name: name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name: name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name: name\n    });\n  };\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(event) {\n      var target, name, field, _error2, isValid, fieldValue, isBlurEvent, shouldSkipValidation, isWatched, fieldState, shouldRender, _yield$executeResolve2, errors, parentNodeName, parentField, parentError;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              target = event.target;\n              name = target.name;\n              field = get(_fields, name);\n\n              if (!field) {\n                _context7.next = 37;\n                break;\n              }\n\n              fieldValue = target.type ? getFieldValue(field._f) : target.value;\n              isBlurEvent = event.type === EVENTS.BLUR;\n              shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n              isWatched = isFieldWatched(name, isBlurEvent);\n\n              if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n              } else if (field._f.onChange) {\n                field._f.onChange(event);\n              }\n\n              set(_formValues, name, fieldValue);\n              fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n              shouldRender = !isEmptyObject(fieldState) || isWatched;\n              !isBlurEvent && _subjects.watch.next({\n                name: name,\n                type: event.type\n              });\n\n              if (!shouldSkipValidation) {\n                _context7.next = 15;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", shouldRender && _subjects.state.next(Object.assign({\n                name: name\n              }, isWatched ? {} : fieldState)));\n\n            case 15:\n              !isBlurEvent && isWatched && _subjects.state.next({});\n              validateFields[name] = validateFields[name] ? +1 : 1;\n              _proxyFormState.isValidating && _subjects.state.next({\n                isValidating: true\n              });\n\n              if (!_options.resolver) {\n                _context7.next = 28;\n                break;\n              }\n\n              _context7.next = 21;\n              return executeResolver([name]);\n\n            case 21:\n              _yield$executeResolve2 = _context7.sent;\n              errors = _yield$executeResolve2.errors;\n              _error2 = get(errors, name);\n\n              if (isCheckBoxInput(target) && !_error2) {\n                parentNodeName = getNodeParentName(name);\n                parentField = get(_fields, parentNodeName);\n\n                if (Array.isArray(parentField) && parentField.every(function (field) {\n                  return field._f && isCheckBoxInput(field._f.ref);\n                })) {\n                  parentError = get(errors, parentNodeName, {});\n                  parentError.type && (_error2 = parentError);\n                  name = parentNodeName;\n                }\n              }\n\n              isValid = isEmptyObject(errors);\n              _context7.next = 35;\n              break;\n\n            case 28:\n              _context7.next = 30;\n              return validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n            case 30:\n              _context7.t0 = name;\n              _error2 = _context7.sent[_context7.t0];\n              _context7.next = 34;\n              return _updateValid(true);\n\n            case 34:\n              isValid = _context7.sent;\n\n            case 35:\n              field._f.deps && trigger(field._f.deps);\n              shouldRenderByError(false, name, isValid, _error2, fieldState);\n\n            case 37:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function handleChange(_x15) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var trigger = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(name) {\n      var options,\n          isValid,\n          validationResult,\n          fieldNames,\n          errors,\n          _args9 = arguments;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n              fieldNames = convertToArrayPayload(name);\n\n              _subjects.state.next({\n                isValidating: true\n              });\n\n              if (!_options.resolver) {\n                _context9.next = 11;\n                break;\n              }\n\n              _context9.next = 6;\n              return executeResolverValidation(isUndefined(name) ? name : fieldNames);\n\n            case 6:\n              errors = _context9.sent;\n              isValid = isEmptyObject(errors);\n              validationResult = name ? !fieldNames.some(function (name) {\n                return get(errors, name);\n              }) : isValid;\n              _context9.next = 21;\n              break;\n\n            case 11:\n              if (!name) {\n                _context9.next = 18;\n                break;\n              }\n\n              _context9.next = 14;\n              return Promise.all(fieldNames.map( /*#__PURE__*/function () {\n                var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(fieldName) {\n                  var field;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          field = get(_fields, fieldName);\n                          _context8.next = 3;\n                          return executeBuildInValidation(field && field._f ? _defineProperty({}, fieldName, field) : field);\n\n                        case 3:\n                          return _context8.abrupt(\"return\", _context8.sent);\n\n                        case 4:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n\n                return function (_x17) {\n                  return _ref18.apply(this, arguments);\n                };\n              }()));\n\n            case 14:\n              validationResult = _context9.sent.every(Boolean);\n\n              _updateValid();\n\n              _context9.next = 21;\n              break;\n\n            case 18:\n              _context9.next = 20;\n              return executeBuildInValidation(_fields);\n\n            case 20:\n              validationResult = isValid = _context9.sent;\n\n            case 21:\n              _subjects.state.next(Object.assign(Object.assign({}, !isString(name) || isValid !== _formState.isValid ? {} : {\n                name: name\n              }), {\n                errors: _formState.errors,\n                isValid: isValid,\n                isValidating: false\n              }));\n\n              options.shouldFocus && !validationResult && focusFieldBy(_fields, function (key) {\n                return get(_formState.errors, key);\n              }, name ? fieldNames : _names.mount);\n              return _context9.abrupt(\"return\", validationResult);\n\n            case 24:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function trigger(_x16) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getValues = function getValues(fieldNames) {\n    var values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(function (name) {\n      return get(values, name);\n    });\n  };\n\n  var clearErrors = function clearErrors(name) {\n    name ? convertToArrayPayload(name).forEach(function (inputName) {\n      return unset(_formState.errors, inputName);\n    }) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n\n  var setError = function setError(name, error, options) {\n    var ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref: ref\n    }));\n\n    _subjects.state.next({\n      name: name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  var watch = function watch(name, defaultValue) {\n    return isFunction(name) ? _subjects.watch.subscribe({\n      next: function next(info) {\n        return name(_getWatch(undefined, defaultValue), info);\n      }\n    }) : _getWatch(name, defaultValue, true);\n  };\n\n  var unregister = function unregister(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _iterator9 = _createForOfIteratorHelper(name ? convertToArrayPayload(name) : _names.mount),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var fieldName = _step9.value;\n\n        _names.mount.delete(fieldName);\n\n        _names.array.delete(fieldName);\n\n        if (get(_fields, fieldName)) {\n          if (!options.keepValue) {\n            unset(_fields, fieldName);\n            unset(_formValues, fieldName);\n          }\n\n          !options.keepError && unset(_formState.errors, fieldName);\n          !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n          !options.keepTouched && unset(_formState.touchedFields, fieldName);\n          !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  var register = function register(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name: name\n        }\n      }), {\n        name: name,\n        mount: true\n      }), options)\n    });\n\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name: name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: function (_ref20) {\n        function ref(_x18) {\n          return _ref20.apply(this, arguments);\n        }\n\n        ref.toString = function () {\n          return _ref20.toString();\n        };\n\n        return ref;\n      }(function (ref) {\n        if (ref) {\n          register(name, options);\n\n          var _field = get(_fields, name);\n\n          var fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          var isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n          if (fieldRef === _field._f.ref || isRadioOrCheckbox && compact(_field._f.refs || []).find(function (option) {\n            return option === fieldRef;\n          })) {\n            return;\n          }\n\n          _field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, _field._f), {\n              refs: [].concat(_toConsumableArray(compact(_field._f.refs || []).filter(live)), [fieldRef]),\n              ref: {\n                type: fieldRef.type,\n                name: name\n              }\n            }) : Object.assign(Object.assign({}, _field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, _field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          var _field2 = get(_fields, name, {});\n\n          var shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n\n          if (_field2._f) {\n            _field2._f.mount = false;\n          }\n\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      })\n    });\n  };\n\n  var handleSubmit = function handleSubmit(onValid, onInvalid) {\n    return /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(e) {\n        var hasNoPromiseError, fieldValues, _yield$executeResolve3, errors, values;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (e) {\n                  e.preventDefault && e.preventDefault();\n                  e.persist && e.persist();\n                }\n\n                hasNoPromiseError = true;\n                fieldValues = Object.assign({}, _formValues);\n\n                _subjects.state.next({\n                  isSubmitting: true\n                });\n\n                _context10.prev = 4;\n\n                if (!_options.resolver) {\n                  _context10.next = 15;\n                  break;\n                }\n\n                _context10.next = 8;\n                return executeResolver();\n\n              case 8:\n                _yield$executeResolve3 = _context10.sent;\n                errors = _yield$executeResolve3.errors;\n                values = _yield$executeResolve3.values;\n                _formState.errors = errors;\n                fieldValues = values;\n                _context10.next = 17;\n                break;\n\n              case 15:\n                _context10.next = 17;\n                return executeBuildInValidation(_fields);\n\n              case 17:\n                if (!(isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(function (name) {\n                  return get(fieldValues, name);\n                }))) {\n                  _context10.next = 23;\n                  break;\n                }\n\n                _subjects.state.next({\n                  errors: {},\n                  isSubmitting: true\n                });\n\n                _context10.next = 21;\n                return onValid(fieldValues, e);\n\n              case 21:\n                _context10.next = 28;\n                break;\n\n              case 23:\n                _context10.t0 = onInvalid;\n\n                if (!_context10.t0) {\n                  _context10.next = 27;\n                  break;\n                }\n\n                _context10.next = 27;\n                return onInvalid(_formState.errors, e);\n\n              case 27:\n                _options.shouldFocusError && focusFieldBy(_fields, function (key) {\n                  return get(_formState.errors, key);\n                }, _names.mount);\n\n              case 28:\n                _context10.next = 34;\n                break;\n\n              case 30:\n                _context10.prev = 30;\n                _context10.t1 = _context10[\"catch\"](4);\n                hasNoPromiseError = false;\n                throw _context10.t1;\n\n              case 34:\n                _context10.prev = 34;\n                _formState.isSubmitted = true;\n\n                _subjects.state.next({\n                  isSubmitted: true,\n                  isSubmitting: false,\n                  isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n                  submitCount: _formState.submitCount + 1,\n                  errors: _formState.errors\n                });\n\n                return _context10.finish(34);\n\n              case 38:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[4, 30, 34, 38]]);\n      }));\n\n      return function (_x19) {\n        return _ref21.apply(this, arguments);\n      };\n    }();\n  };\n\n  var reset = function reset(formValues) {\n    var keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var hasUpdatedFormValues = !isEmptyObject(formValues);\n    var updatedValues = formValues || _defaultValues;\n    var cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        var _iterator10 = _createForOfIteratorHelper(_names.mount),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _name5 = _step10.value;\n            var field = get(_fields, _name5);\n\n            if (field && field._f) {\n              var fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n              try {\n                isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n                break;\n              } catch (_a) {}\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? _defaultValues : {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce(function (previous, _ref22) {\n        var _ref23 = _slicedToArray(_ref22, 2),\n            key = _ref23[0],\n            value = _ref23[1];\n\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value !== get(_defaultValues, key)));\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  var setFocus = function setFocus(name) {\n    var field = get(_fields, name)._f;\n\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register: register,\n      unregister: unregister,\n      _getWatch: _getWatch,\n      _getDirty: _getDirty,\n      _updateValid: _updateValid,\n      _removeUnmounted: _removeUnmounted,\n      _updateFieldArray: _updateFieldArray,\n      _getFieldArray: _getFieldArray,\n      _subjects: _subjects,\n      _proxyFormState: _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      set _fields(value) {\n        _fields = value;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      set _formValues(value) {\n        _formValues = value;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n\n    },\n    trigger: trigger,\n    register: register,\n    handleSubmit: handleSubmit,\n    watch: watch,\n    setValue: setValue,\n    getValues: getValues,\n    reset: reset,\n    clearErrors: clearErrors,\n    unregister: unregister,\n    setError: setError,\n    setFocus: setFocus\n  };\n}\n\nfunction useForm() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _formControl = React.useRef();\n\n  var _React$useState7 = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      formState = _React$useState8[0],\n      updateFormState = _React$useState8[1];\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState: formState\n    });\n  }\n\n  var control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: function callback(formState) {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(function () {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\nfunction useWatch(props) {\n  var methods = useFormContext();\n\n  var _ref24 = props || {},\n      _ref24$control = _ref24.control,\n      control = _ref24$control === void 0 ? methods.control : _ref24$control,\n      name = _ref24.name,\n      defaultValue = _ref24.defaultValue,\n      disabled = _ref24.disabled;\n\n  var _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    subject: control._subjects.watch,\n    callback: function callback(formState) {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n\n        var fieldValues = control._getWatch(_name.current, defaultValue);\n\n        updateValue(isObject(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? _toConsumableArray(fieldValues) : fieldValues);\n      }\n    }\n  });\n\n  var _React$useState9 = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      value = _React$useState10[0],\n      updateValue = _React$useState10[1];\n\n  React.useEffect(function () {\n    control._removeUnmounted();\n  });\n  return value;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":"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","names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getControllerValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","Provider","children","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","updateSubscriptionProps","disabled","subject","subscribe","next","callback","useSubscribe","useRef","_updateSubscription","skipEarlySubscription","useEffect","useFormState","methods","control","useState","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_subjects","state","useController","shouldUnregister","_formValues","_defaultValues","setInputStateValue","values","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","_shouldUnregisterField","_options","_names","array","_stateFlags","action","unregister","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","getFocusFieldName","options","shouldFocus","focusName","focusIndex","mapCurrentIds","_fieldIds","keyName","map","output","generateId","d","performance","now","c","r","Math","random","toString","mapIds","append","fillEmptyArray","insert","slice","moveArrayAt","from","to","splice","omitKeys","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","updateAt","fieldValues","useFieldArray","_getFieldArray","setFields","add","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","appendValue","appendAt","_updateFieldArray","argA","prependAt","remove","insertAt","argB","swap","move","update","watchAll","watch","watchField","_updateValid","isFunction","cloneObject","Set","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckboxFunction","isString","window","document","live","contains","Subscription","tearDowns","push","teardown","Subscriber","observer","subscription","closed","Subject","observers","subscriber","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isFileInput","defaultResult","validResult","getCheckboxValue","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","isCheckBox","getResolverOptions","criteriaMode","shouldUseNativeValidation","hasValidation","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","skipValidation","isBlurEvent","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isValidElement","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","maxOutput","minOutput","valueNumber","parseFloat","exceedMin","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeResolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeResolverValidation","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","getValues","_getWatch","isGlobal","fieldName","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","deps","isWatched","parentNodeName","parentField","parentError","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl","useWatch","updateValue"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/subject.ts","../src/utils/unset.ts","../src/utils/isFileInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { SubjectType, TearDown } from './utils/subject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: SubjectType<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport Subject from '../utils/subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) || isValid !== _formState.isValid ? {} : { name }),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<\n            DeepPartialSkipArrayKey<TFieldValues>\n          >,\n        );\n\n        updateValue(\n          isObject(fieldValues)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}