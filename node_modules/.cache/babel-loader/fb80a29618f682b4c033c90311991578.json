{"ast":null,"code":"import * as React from 'react';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isDateObject = data => data instanceof Date;\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\n\nvar compact = value => value.filter(Boolean);\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n\n  return undefined;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nconst HookFormContext = React.createContext(null);\n\nconst useFormContext = () => React.useContext(HookFormContext);\n\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\n\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n\n      return undefined;\n    };\n  }\n\n  const result = {};\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar shouldSubscribeByName = (name, signalName) => !name || !signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\n\nconst tearDown = _unsubscribe => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps = _ref => {\n  let {\n    _unsubscribe,\n    props\n  } = _ref;\n  return () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback\n      });\n    }\n  };\n};\n\nfunction useSubscribe(props) {\n  const _unsubscribe = React.useRef();\n\n  const _updateSubscription = React.useRef(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props\n  });\n  !props.skipEarlySubscription && _updateSubscription.current();\n  React.useEffect(() => {\n    _updateSubscription.current();\n\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    callback: formState => shouldSubscribeByName(_name.current, formState.name) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState)),\n    subject: control._subjects.state,\n    skipEarlySubscription: true\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const [value, setInputStateValue] = React.useState(get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: data => (!data.name || _name.current === data.name) && setInputStateValue(get(data.values, _name.current))\n  });\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  const updateMounted = React.useCallback((name, value) => {\n    const field = get(control._fields, name);\n\n    if (field) {\n      field._f.mount = value;\n    }\n  }, [control]);\n  React.useEffect(() => {\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        registerProps.onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n};\n\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\n  const output = _fieldIds.current[index];\n  return Object.assign(Object.assign({}, value), output ? {\n    [keyName]: output[keyName]\n  } : {});\n});\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign(Object.assign({}, value[keyName] ? {} : {\n    [keyName]: generateId()\n  }), value));\n};\n\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar omitKeys = (fields, keyName) => fields.map(function () {\n  let field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return omit(field, keyName);\n});\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\n\n  const _fieldIds = React.useRef(fields);\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: _ref2 => {\n      let {\n        values,\n        name: fieldArrayName\n      } = _ref2;\n\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValuesWithKey => {\n    const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    set(control._formValues, name, updatedFieldArrayValues);\n    setFields(updatedFieldArrayValuesWithKey);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n\n  const prepend$1 = (value, options) => {\n    const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n  };\n\n  const insert$1 = (index, value, options) => {\n    const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  const move = (from, to) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  const update = (index, value) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n  };\n\n  const replace = value => {\n    const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n\n    control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\n\nvar isFunction = value => typeof value === 'function';\n\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isString = value => typeof value === 'string';\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nvar live = ref => isHTMLElement(ref) && document.contains(ref);\n\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n\n    this.tearDowns = [];\n  }\n\n}\n\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n\n}\n\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n\n}\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar isFileInput = element => element.type === 'file';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = (value, _ref3) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref3;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref4 => {\n      let {\n        value\n      } = _ref4;\n      return value;\n    });\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name, [])).length && unset(ref, name);\n\nvar isMessage = value => isString(value) || React.isValidElement(value);\n\nvar isRegex = value => value instanceof RegExp;\n\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n\n  if (!mount || disabled) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nconst isWindowUndefined = typeof window === 'undefined';\n\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n\n  let _defaultValues = _options.defaultValues || {};\n\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n\n  const isFieldWatched = (name, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await executeResolver()).errors) : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray = function (name, method, args) {\n    let values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n\n  const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\n    const field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = function (name, fieldValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name, value) => (set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name));\n\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n\n      validateFields = {};\n    }\n  };\n\n  const executeResolver = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n\n  const executeResolverValidation = async names => {\n    const {\n      errors\n    } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(fieldName => (isGlobal && _names.watch.add(fieldName), get(fieldValues, fieldName)));\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    const field = get(_fields, name);\n    let fieldValue = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender && _subjects.control.next({\n          values: _formValues,\n          name\n        });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name\n    });\n  };\n\n  const handleChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, isWatched ? {} : fieldState));\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n\n      if (_options.resolver) {\n        const {\n          errors\n        } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (Array.isArray(parentField) && parentField.every(field => field._f && isCheckBoxInput(field._f.ref))) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n\n    _subjects.state.next({\n      isValidating: true\n    });\n\n    if (_options.resolver) {\n      const errors = await executeResolverValidation(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next(Object.assign(Object.assign({}, !isString(name) || isValid !== _formState.isValid ? {} : {\n      name\n    }), {\n      errors: _formState.errors,\n      isValid,\n      isValidating: false\n    }));\n\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          let field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n          if (fieldRef === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === fieldRef)) {\n            return;\n          }\n\n          field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [...compact(field._f.refs || []).filter(live), fieldRef],\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          const field = get(_fields, name, {});\n          const shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = Object.assign({}, _formValues);\n\n    _subjects.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await executeResolver();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? _defaultValues : {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref5) => {\n        let [key, value] = _ref5;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      set _fields(value) {\n        _fields = value;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      set _formValues(value) {\n        _formValues = value;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\n\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const _formControl = React.useRef();\n\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: formState => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled\n  } = props || {};\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: formState => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n\n        const fieldValues = control._getWatch(_name.current, defaultValue);\n\n        updateValue(isObject(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : fieldValues);\n      }\n    }\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":"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","names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","source","copy","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","Provider","omit","children","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","updateSubscriptionProps","disabled","subject","subscribe","next","callback","useSubscribe","useRef","_updateSubscription","skipEarlySubscription","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","values","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","getControllerValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","sort","a","b","indexA","indexB","fieldValues","useFieldArray","setFields","mapIds","_getFieldArray","add","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","appendValue","appendAt","mapCurrentIds","_updateFieldArray","argA","fillEmptyArray","getFocusFieldName","prependAt","remove","removeArrayAt","insertAt","argB","swap","swapArrayAt","move","moveArrayAt","update","updateAt","watchAll","watchField","watch","_updateValid","cloneObject","Set","isFunction","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","Subscription","constructor","tearDowns","push","teardown","Subscriber","observer","subscription","closed","Subject","observers","subscriber","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isString","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeResolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeResolverValidation","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","_removeUnmounted","live","getValues","_getWatch","isGlobal","fieldName","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","parentNodeName","parentField","parentError","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl","useWatch","updateValue"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/subject.ts","../src/utils/unset.ts","../src/utils/isFileInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { SubjectType, TearDown } from './utils/subject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: SubjectType<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport Subject from '../utils/subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) || isValid !== _formState.isValid ? {} : { name }),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<\n            DeepPartialSkipArrayKey<TFieldValues>\n          >,\n        );\n\n        updateValue(\n          isObject(fieldValues)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}